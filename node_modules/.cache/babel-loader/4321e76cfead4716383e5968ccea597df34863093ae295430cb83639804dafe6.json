{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gulfu\\\\Documents\\\\Best_Flag_Guesser\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport data from './data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [shuffledData, setShuffledData] = useState(data.sort(() => Math.random() - 0.5));\n  const [dataIndex, setDataIndex] = useState(0);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const handleAnswerButtonClick = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    // Remove the current question and its answers from the shuffledData array\n    const remainingData = shuffledData.splice(0, currentQuestion).concat(shuffledData.splice(1));\n    if (remainingData.length > 0) {\n      // Randomize the order of the remaining questions and answers\n      const shuffledRemainingData = remainingData.sort(() => Math.random() - 0.5);\n      const shuffledAnswers = shuffledRemainingData[0].answers.sort(() => Math.random() - 0.5);\n      setCurrentQuestion(0);\n      setDataIndex(dataIndex + 1);\n      setShuffledData(shuffledRemainingData);\n      setAnswers(shuffledAnswers);\n    } else {\n      setShowScore(true);\n    }\n  };\n  const handleNextButtonClick = () => {\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < shuffledData[dataIndex].answers.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setDataIndex(dataIndex + 1);\n      const shuffledAnswers = shuffledData[dataIndex + 1].answers.sort(() => Math.random() - 0.5);\n      setCurrentQuestion(0);\n      setAnswers(shuffledAnswers);\n    }\n  };\n  const [answers, setAnswers] = useState(shuffledData[0].answers.sort(() => Math.random() - 0.5));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: showScore ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-section\",\n      children: [\"You scored \", score, \" out of \", shuffledData.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"photo\",\n          src: shuffledData[dataIndex].photo,\n          alt: \"guess the word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-text\",\n          children: \"Which one of the following is the correct answer?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-section\",\n        children: answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswerButtonClick(answer.isCorrect),\n          children: answer.answerText\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"next-section\",\n        children: currentQuestion === shuffledData[dataIndex].answers.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextButtonClick,\n          children: \"Next photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextButtonClick,\n          children: \"Next question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"VJ9Vk3o+FEJeq/vvg6l597qSrJo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","data","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","shuffledData","setShuffledData","sort","Math","random","dataIndex","setDataIndex","currentQuestion","setCurrentQuestion","score","setScore","showScore","setShowScore","handleAnswerButtonClick","isCorrect","remainingData","splice","concat","length","shuffledRemainingData","shuffledAnswers","answers","setAnswers","handleNextButtonClick","nextQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","photo","alt","map","answer","index","onClick","answerText","_c","$RefreshReg$"],"sources":["C:/Users/gulfu/Documents/Best_Flag_Guesser/my-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport data from './data';\n\nfunction App() {\n  const [shuffledData, setShuffledData] = useState(data.sort(() => Math.random() - 0.5));\n  const [dataIndex, setDataIndex] = useState(0);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n\n  const handleAnswerButtonClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    // Remove the current question and its answers from the shuffledData array\n    const remainingData = shuffledData.splice(0, currentQuestion).concat(shuffledData.splice(1));\n    if (remainingData.length > 0) {\n      // Randomize the order of the remaining questions and answers\n      const shuffledRemainingData = remainingData.sort(() => Math.random() - 0.5);\n      const shuffledAnswers = shuffledRemainingData[0].answers.sort(() => Math.random() - 0.5);\n      setCurrentQuestion(0);\n      setDataIndex(dataIndex + 1);\n      setShuffledData(shuffledRemainingData);\n      setAnswers(shuffledAnswers);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  const handleNextButtonClick = () => {\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < shuffledData[dataIndex].answers.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setDataIndex(dataIndex + 1);\n      const shuffledAnswers = shuffledData[dataIndex + 1].answers.sort(() => Math.random() - 0.5);\n      setCurrentQuestion(0);\n      setAnswers(shuffledAnswers);\n    }\n  };\n\n  const [answers, setAnswers] = useState(shuffledData[0].answers.sort(() => Math.random() - 0.5));\n\n  return (\n    <div className=\"app\">\n      {showScore ? (\n        <div className=\"score-section\">\n          You scored {score} out of {shuffledData.length}\n        </div>\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <img className=\"photo\" src={shuffledData[dataIndex].photo} alt=\"guess the word\" />\n            <div className=\"question-text\">Which one of the following is the correct answer?</div>\n          </div>\n          <div className=\"answer-section\">\n            {answers.map((answer, index) => (\n              <button key={index} onClick={() => handleAnswerButtonClick(answer.isCorrect)}>\n                {answer.answerText}\n              </button>\n            ))}\n          </div>\n          <div className=\"next-section\">\n            {currentQuestion === shuffledData[dataIndex].answers.length - 1 ? (\n              <button onClick={handleNextButtonClick}>Next photo</button>\n            ) : (\n              <button onClick={handleNextButtonClick}>Next question</button>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}