{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gulfu\\\\Documents\\\\Best_Flag_Guesser\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { data } from './data.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction shuffleData(data) {\n  const shuffledData = data.sort(() => Math.random() - 0.5);\n  const shuffledAnswers = shuffledData[0].answers.sort(() => Math.random() - 0.5);\n  return {\n    shuffledData: shuffledData,\n    shuffledAnswers: shuffledAnswers\n  };\n}\nfunction App() {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [shuffledData, setShuffledData] = useState([]);\n  const [shuffledAnswers, setShuffledAnswers] = useState([]);\n  useEffect(() => {\n    const {\n      shuffledData,\n      shuffledAnswers\n    } = shuffleData(data);\n    setShuffledData(shuffledData);\n    setShuffledAnswers(shuffledAnswers);\n  }, []);\n  const handleAnswerButtonClick = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < shuffledData.length) {\n      const {\n        shuffledData: newShuffledData,\n        shuffledAnswers: newShuffledAnswers\n      } = shuffleData(shuffledData.slice(1));\n      setShuffledData([...newShuffledData, shuffledData[0]]);\n      setShuffledAnswers(newShuffledAnswers);\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n  const handleRestartButtonClick = () => {\n    const {\n      shuffledData,\n      shuffledAnswers\n    } = shuffleData(data);\n    setShuffledData(shuffledData);\n    setShuffledAnswers(shuffledAnswers);\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: showScore ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-section\",\n      children: [\"You scored \", score, \" out of \", shuffledData.length, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRestartButtonClick,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: shuffledData[currentQuestion].image,\n          alt: \"Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers-container\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: shuffledAnswers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => handleAnswerButtonClick(answer.isCorrect),\n            children: answer.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xHzXpHS9cuVKTt2JaVk0v1ALD3A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","data","jsxDEV","_jsxDEV","Fragment","_Fragment","shuffleData","shuffledData","sort","Math","random","shuffledAnswers","answers","App","_s","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","setShuffledData","setShuffledAnswers","handleAnswerButtonClick","isCorrect","nextQuestion","length","newShuffledData","newShuffledAnswers","slice","handleRestartButtonClick","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","image","alt","map","answer","index","text","_c","$RefreshReg$"],"sources":["C:/Users/gulfu/Documents/Best_Flag_Guesser/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { data } from './data.js';\n\nfunction shuffleData(data) {\n  const shuffledData = data.sort(() => Math.random() - 0.5);\n  const shuffledAnswers = shuffledData[0].answers.sort(() => Math.random() - 0.5);\n  return {\n    shuffledData: shuffledData,\n    shuffledAnswers: shuffledAnswers\n  };\n}\n\nfunction App() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [shuffledData, setShuffledData] = useState([]);\n  const [shuffledAnswers, setShuffledAnswers] = useState([]);\n\n  useEffect(() => {\n    const { shuffledData, shuffledAnswers } = shuffleData(data);\n    setShuffledData(shuffledData);\n    setShuffledAnswers(shuffledAnswers);\n  }, []);\n\n  const handleAnswerButtonClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < shuffledData.length) {\n      const { shuffledData: newShuffledData, shuffledAnswers: newShuffledAnswers } = shuffleData(shuffledData.slice(1));\n      setShuffledData([...newShuffledData, shuffledData[0]]);\n      setShuffledAnswers(newShuffledAnswers);\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  const handleRestartButtonClick = () => {\n    const { shuffledData, shuffledAnswers } = shuffleData(data);\n    setShuffledData(shuffledData);\n    setShuffledAnswers(shuffledAnswers);\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n  };\n\n  return (\n    <div className=\"container\">\n      {showScore ? (\n        <div className=\"score-section\">\n          You scored {score} out of {shuffledData.length}\n          <button onClick={handleRestartButtonClick}>Restart</button>\n        </div>\n      ) : (\n        <>\n          <div className=\"image-container\">\n            <img src={shuffledData[currentQuestion].image} alt=\"Question\" />\n          </div>\n          <div className=\"answers-container\">\n            <ul>\n              {shuffledAnswers.map((answer, index) => (\n                <li key={index} onClick={() => handleAnswerButtonClick(answer.isCorrect)}>\n                  {answer.text}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,SAASC,IAAI,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEjC,SAASC,WAAWA,CAACL,IAAI,EAAE;EACzB,MAAMM,YAAY,GAAGN,IAAI,CAACO,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC;EACzD,MAAMC,eAAe,GAAGJ,YAAY,CAAC,CAAC,CAAC,CAACK,OAAO,CAACJ,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC;EAC/E,OAAO;IACLH,YAAY,EAAEA,YAAY;IAC1BI,eAAe,EAAEA;EACnB,CAAC;AACH;AAEA,SAASE,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACQ,YAAY,EAAEc,eAAe,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACY,eAAe,EAAEW,kBAAkB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAE1DC,SAAS,CAAC,MAAM;IACd,MAAM;MAAEO,YAAY;MAAEI;IAAgB,CAAC,GAAGL,WAAW,CAACL,IAAI,CAAC;IAC3DoB,eAAe,CAACd,YAAY,CAAC;IAC7Be,kBAAkB,CAACX,eAAe,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,uBAAuB,GAAIC,SAAS,IAAK;IAC7C,IAAIA,SAAS,EAAE;MACbJ,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;IACrB;IAEA,MAAMM,YAAY,GAAGV,eAAe,GAAG,CAAC;IACxC,IAAIU,YAAY,GAAGlB,YAAY,CAACmB,MAAM,EAAE;MACtC,MAAM;QAAEnB,YAAY,EAAEoB,eAAe;QAAEhB,eAAe,EAAEiB;MAAmB,CAAC,GAAGtB,WAAW,CAACC,YAAY,CAACsB,KAAK,CAAC,CAAC,CAAC,CAAC;MACjHR,eAAe,CAAC,CAAC,GAAGM,eAAe,EAAEpB,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;MACtDe,kBAAkB,CAACM,kBAAkB,CAAC;MACtCZ,kBAAkB,CAACS,YAAY,CAAC;IAClC,CAAC,MAAM;MACLP,YAAY,CAAC,IAAI,CAAC;IACpB;EACF,CAAC;EAED,MAAMY,wBAAwB,GAAGA,CAAA,KAAM;IACrC,MAAM;MAAEvB,YAAY;MAAEI;IAAgB,CAAC,GAAGL,WAAW,CAACL,IAAI,CAAC;IAC3DoB,eAAe,CAACd,YAAY,CAAC;IAC7Be,kBAAkB,CAACX,eAAe,CAAC;IACnCK,kBAAkB,CAAC,CAAC,CAAC;IACrBE,YAAY,CAAC,KAAK,CAAC;IACnBE,QAAQ,CAAC,CAAC,CAAC;EACb,CAAC;EAED,oBACEjB,OAAA;IAAK4B,SAAS,EAAC,WAAW;IAAAC,QAAA,EACvBf,SAAS,gBACRd,OAAA;MAAK4B,SAAS,EAAC,eAAe;MAAAC,QAAA,GAAC,aAClB,EAACb,KAAK,EAAC,UAAQ,EAACZ,YAAY,CAACmB,MAAM,eAC9CvB,OAAA;QAAQ8B,OAAO,EAAEH,wBAAyB;QAAAE,QAAA,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACvD,gBAENlC,OAAA,CAAAE,SAAA;MAAA2B,QAAA,gBACE7B,OAAA;QAAK4B,SAAS,EAAC,iBAAiB;QAAAC,QAAA,eAC9B7B,OAAA;UAAKmC,GAAG,EAAE/B,YAAY,CAACQ,eAAe,CAAC,CAACwB,KAAM;UAACC,GAAG,EAAC;QAAU;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC5D,eACNlC,OAAA;QAAK4B,SAAS,EAAC,mBAAmB;QAAAC,QAAA,eAChC7B,OAAA;UAAA6B,QAAA,EACGrB,eAAe,CAAC8B,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACjCxC,OAAA;YAAgB8B,OAAO,EAAEA,CAAA,KAAMV,uBAAuB,CAACmB,MAAM,CAAClB,SAAS,CAAE;YAAAQ,QAAA,EACtEU,MAAM,CAACE;UAAI,GADLD,KAAK;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAGf;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MACC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACD;IAAA;EAET;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAEV;AAACvB,EAAA,CA/DQD,GAAG;AAAAgC,EAAA,GAAHhC,GAAG;AAiEZ,eAAeA,GAAG;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}