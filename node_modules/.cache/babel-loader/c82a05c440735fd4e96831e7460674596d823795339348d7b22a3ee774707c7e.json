{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gulfu\\\\Documents\\\\Best_Flag_Guesser\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { data } from './data';\nimport { easy_normalData } from './easy_normalData';\nimport { hardData } from './hardData';\nimport { extremeData } from './extremeData';\nimport { impossibleData } from './impossibleData';\nimport StartMenu from './Menu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [selectedDifficulty, setSelectedDifficulty] = useState('');\n  const [restartGame, setRestartGame] = useState(false);\n\n  // Randomize the order of the photos and answer options\n  const shuffledData = data.sort(() => Math.random() - 0.5);\n  const shuffledAnswers = shuffledData[currentQuestion].answers.sort(() => Math.random() - 0.5);\n  const handleAnswerButtonClick = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < 20 || shuffledData.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n  const handleRestartButtonClick = () => {\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n    setSelectedDifficulty('');\n    setRestartGame(true);\n  };\n  const handleDifficultySelect = difficulty => {\n    setSelectedDifficulty(difficulty);\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n    setRestartGame(false);\n  };\n  const getCurrentData = () => {\n    switch (selectedDifficulty) {\n      case 'easy/normal':\n        return easy_normalData;\n      case 'hard':\n        return hardData;\n      case 'extreme':\n        return extremeData;\n      case 'impossible':\n        return impossibleData;\n      default:\n        return [];\n    }\n  };\n\n  // return (\n  //   <div className=\"container\">\n  //     {selectedDifficulty === '' || restartGame ? (\n  //       <StartMenu onSelectDifficulty={handleDifficultySelect} />\n  //     ) : (\n  //       <>\n  //         {showScore ? (\n  //           <div className=\"score-section\">\n  //             <h1>You scored {score} out of 20</h1>\n  //             <button onClick={handleRestartButtonClick}>Restart</button>\n  //           </div>\n  //         ) : (\n  //           <>\n  //             <div className=\"image-container\">\n  //               <img src={getCurrentData()[currentQuestion].image} alt=\"Question\" />\n  //             </div>\n  //             <div className=\"answers-container\">\n  //               <ul>\n  //                 {getCurrentData()[currentQuestion].answers.map((answer, index) => (\n  //                   <li key={index} onClick={() => handleAnswerButtonClick(answer.isCorrect)}>\n  //                     {answer.text}\n  //                   </li>\n  //                 ))}\n  //               </ul>\n  //             </div>\n  //           </>\n  //         )}\n  //       </>\n  //     )}\n  //   </div>\n  // );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: showScore ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-section\",\n      children: [\"You scored \", score, \" out of \", shuffledData.length, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRestartButtonClick,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: shuffledData[currentQuestion].image,\n          alt: \"Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers-container\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: shuffledAnswers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => handleAnswerButtonClick(answer.isCorrect),\n            children: answer.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ThdpZMy1CEHDV4qJS9Q9escRExE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","data","easy_normalData","hardData","extremeData","impossibleData","StartMenu","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","selectedDifficulty","setSelectedDifficulty","restartGame","setRestartGame","shuffledData","sort","Math","random","shuffledAnswers","answers","handleAnswerButtonClick","isCorrect","nextQuestion","length","handleRestartButtonClick","handleDifficultySelect","difficulty","getCurrentData","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","image","alt","map","answer","index","text","_c","$RefreshReg$"],"sources":["C:/Users/gulfu/Documents/Best_Flag_Guesser/my-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nimport { data } from './data';\nimport { easy_normalData } from './easy_normalData';\nimport { hardData } from './hardData';\nimport { extremeData } from './extremeData';\nimport { impossibleData } from './impossibleData';\n\nimport StartMenu from './Menu';\n\nfunction App() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [selectedDifficulty, setSelectedDifficulty] = useState('');\n  const [restartGame, setRestartGame] = useState(false);\n\n  // Randomize the order of the photos and answer options\n  const shuffledData = data.sort(() => Math.random() - 0.5);\n  const shuffledAnswers = shuffledData[currentQuestion].answers.sort(() => Math.random() - 0.5);\n\n  const handleAnswerButtonClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < 20 || shuffledData.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  const handleRestartButtonClick = () => {\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n    setSelectedDifficulty('');\n    setRestartGame(true);\n  };\n\n  const handleDifficultySelect = (difficulty) => {\n    setSelectedDifficulty(difficulty);\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n    setRestartGame(false);\n  };\n\n  const getCurrentData = () => {\n    switch (selectedDifficulty) {\n      case 'easy/normal':\n        return easy_normalData;\n      case 'hard':\n        return hardData;\n      case 'extreme':\n        return extremeData;\n      case 'impossible':\n        return impossibleData;\n      default:\n        return [];\n    }\n  };\n\n  // return (\n  //   <div className=\"container\">\n  //     {selectedDifficulty === '' || restartGame ? (\n  //       <StartMenu onSelectDifficulty={handleDifficultySelect} />\n  //     ) : (\n  //       <>\n  //         {showScore ? (\n  //           <div className=\"score-section\">\n  //             <h1>You scored {score} out of 20</h1>\n  //             <button onClick={handleRestartButtonClick}>Restart</button>\n  //           </div>\n  //         ) : (\n  //           <>\n  //             <div className=\"image-container\">\n  //               <img src={getCurrentData()[currentQuestion].image} alt=\"Question\" />\n  //             </div>\n  //             <div className=\"answers-container\">\n  //               <ul>\n  //                 {getCurrentData()[currentQuestion].answers.map((answer, index) => (\n  //                   <li key={index} onClick={() => handleAnswerButtonClick(answer.isCorrect)}>\n  //                     {answer.text}\n  //                   </li>\n  //                 ))}\n  //               </ul>\n  //             </div>\n  //           </>\n  //         )}\n  //       </>\n  //     )}\n  //   </div>\n  // );\n  return (\n    <div className=\"container\">\n      {showScore ? (\n        <div className=\"score-section\">\n          You scored {score} out of {shuffledData.length}\n          <button onClick={handleRestartButtonClick}>Restart</button>\n        </div>\n      ) : (\n        <>\n          <div className=\"image-container\">\n            <img src={shuffledData[currentQuestion].image} alt=\"Question\" />\n          </div>\n          <div className=\"answers-container\">\n            <ul>\n              {shuffledAnswers.map((answer, index) => (\n                <li key={index} onClick={() => handleAnswerButtonClick(answer.isCorrect)}>\n                  {answer.text}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </>\n      )}\n    </div>\n  );\n  \n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}