{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gulfu\\\\Documents\\\\Best_Flag_Guesser\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { data } from './data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [usedIndices, setUsedIndices] = useState([]);\n  useEffect(() => {\n    // Reset usedIndices whenever the game is restarted\n    setUsedIndices([]);\n  }, [showScore]);\n  const getRandomUnseenIndex = max => {\n    const unusedIndices = [...Array(max).keys()].filter(i => !usedIndices.includes(i));\n    const randomIndex = unusedIndices[Math.floor(Math.random() * unusedIndices.length)];\n    return randomIndex;\n  };\n  const handleAnswerButtonClick = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < data.length) {\n      setCurrentQuestion(getRandomUnseenIndex(data.length));\n    } else {\n      setShowScore(true);\n    }\n  };\n  const handleRestartButtonClick = () => {\n    setCurrentQuestion(getRandomUnseenIndex(data.length));\n    setShowScore(false);\n    setScore(0);\n  };\n  const shuffledIndex = getRandomUnseenIndex(data.length);\n  const shuffledAnswers = data[shuffledIndex].answers.sort(() => Math.random() - 0.5);\n  const shuffledData = [...data].sort(() => Math.random() - 0.5);\n\n  // Add current question index to usedIndices so it doesn't appear again\n  setUsedIndices([...usedIndices, shuffledIndex]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: showScore ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-section\",\n      children: [\"You scored \", score, \" out of \", data.length, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRestartButtonClick,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: shuffledData[currentQuestion].image,\n          alt: \"Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers-container\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: shuffledAnswers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => handleAnswerButtonClick(answer.isCorrect),\n            children: answer.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NqweG5vUSsNktiRKTF/AWWnCyr4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","data","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","usedIndices","setUsedIndices","getRandomUnseenIndex","max","unusedIndices","Array","keys","filter","i","includes","randomIndex","Math","floor","random","length","handleAnswerButtonClick","isCorrect","nextQuestion","handleRestartButtonClick","shuffledIndex","shuffledAnswers","answers","sort","shuffledData","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","image","alt","map","answer","index","text","_c","$RefreshReg$"],"sources":["C:/Users/gulfu/Documents/Best_Flag_Guesser/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { data } from './data';\n\nfunction App() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [usedIndices, setUsedIndices] = useState([]);\n\n  useEffect(() => {\n    // Reset usedIndices whenever the game is restarted\n    setUsedIndices([]);\n  }, [showScore]);\n\n  const getRandomUnseenIndex = (max) => {\n    const unusedIndices = [...Array(max).keys()].filter((i) => !usedIndices.includes(i));\n    const randomIndex = unusedIndices[Math.floor(Math.random() * unusedIndices.length)];\n    return randomIndex;\n  };\n\n  const handleAnswerButtonClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < data.length) {\n      setCurrentQuestion(getRandomUnseenIndex(data.length));\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  const handleRestartButtonClick = () => {\n    setCurrentQuestion(getRandomUnseenIndex(data.length));\n    setShowScore(false);\n    setScore(0);\n  };\n\n  const shuffledIndex = getRandomUnseenIndex(data.length);\n  const shuffledAnswers = data[shuffledIndex].answers.sort(() => Math.random() - 0.5);\n  const shuffledData = [...data].sort(() => Math.random() - 0.5);\n\n  // Add current question index to usedIndices so it doesn't appear again\n  setUsedIndices([...usedIndices, shuffledIndex]);\n\n  return (\n    <div className=\"container\">\n      {showScore ? (\n        <div className=\"score-section\">\n          You scored {score} out of {data.length}\n          <button onClick={handleRestartButtonClick}>Restart</button>\n        </div>\n      ) : (\n        <>\n          <div className=\"image-container\">\n            <img src={shuffledData[currentQuestion].image} alt=\"Question\" />\n          </div>\n          <div className=\"answers-container\">\n            <ul>\n              {shuffledAnswers.map((answer, index) => (\n                <li key={index} onClick={() => handleAnswerButtonClick(answer.isCorrect)}>\n                  {answer.text}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}